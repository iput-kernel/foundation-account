// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: verify_email.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createVerifyEmail = `-- name: CreateVerifyEmail :one
INSERT INTO verify_emails (
  id,
  name,
  email,
  password_hash,
  secret_code
) VALUES (
  $1, $2, $3, $4, $5
) RETURNING id, name, email, password_hash, secret_code, created_at, expired_at
`

type CreateVerifyEmailParams struct {
	ID           uuid.UUID `json:"id"`
	Name         string    `json:"name"`
	Email        string    `json:"email"`
	PasswordHash string    `json:"password_hash"`
	SecretCode   string    `json:"secret_code"`
}

func (q *Queries) CreateVerifyEmail(ctx context.Context, arg CreateVerifyEmailParams) (VerifyEmail, error) {
	row := q.db.QueryRow(ctx, createVerifyEmail,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.PasswordHash,
		arg.SecretCode,
	)
	var i VerifyEmail
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.SecretCode,
		&i.CreatedAt,
		&i.ExpiredAt,
	)
	return i, err
}

const getVerifyEmail = `-- name: GetVerifyEmail :one
SELECT id, name, email, password_hash, secret_code, created_at, expired_at FROM verify_emails
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetVerifyEmail(ctx context.Context, id uuid.UUID) (VerifyEmail, error) {
	row := q.db.QueryRow(ctx, getVerifyEmail, id)
	var i VerifyEmail
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.SecretCode,
		&i.CreatedAt,
		&i.ExpiredAt,
	)
	return i, err
}

const verify = `-- name: Verify :one
SELECT id, name, email, password_hash, secret_code, created_at, expired_at FROM verify_emails
WHERE
  id = $1
  AND secret_code = $2
  AND expired_at > now()
  LIMIT 1
`

type VerifyParams struct {
	ID         uuid.UUID `json:"id"`
	SecretCode string    `json:"secret_code"`
}

func (q *Queries) Verify(ctx context.Context, arg VerifyParams) (VerifyEmail, error) {
	row := q.db.QueryRow(ctx, verify, arg.ID, arg.SecretCode)
	var i VerifyEmail
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.SecretCode,
		&i.CreatedAt,
		&i.ExpiredAt,
	)
	return i, err
}
